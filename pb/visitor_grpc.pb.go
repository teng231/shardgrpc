// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: visitor.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VistorServiceClient is the client API for VistorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VistorServiceClient interface {
	ListVisitors(ctx context.Context, in *VisitorRequest, opts ...grpc.CallOption) (*Visitors, error)
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type vistorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVistorServiceClient(cc grpc.ClientConnInterface) VistorServiceClient {
	return &vistorServiceClient{cc}
}

func (c *vistorServiceClient) ListVisitors(ctx context.Context, in *VisitorRequest, opts ...grpc.CallOption) (*Visitors, error) {
	out := new(Visitors)
	err := c.cc.Invoke(ctx, "/pb.VistorService/ListVisitors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vistorServiceClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.VistorService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VistorServiceServer is the server API for VistorService service.
// All implementations should embed UnimplementedVistorServiceServer
// for forward compatibility
type VistorServiceServer interface {
	ListVisitors(context.Context, *VisitorRequest) (*Visitors, error)
	Ping(context.Context, *Empty) (*Empty, error)
}

// UnimplementedVistorServiceServer should be embedded to have forward compatible implementations.
type UnimplementedVistorServiceServer struct {
}

func (UnimplementedVistorServiceServer) ListVisitors(context.Context, *VisitorRequest) (*Visitors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVisitors not implemented")
}
func (UnimplementedVistorServiceServer) Ping(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

// UnsafeVistorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VistorServiceServer will
// result in compilation errors.
type UnsafeVistorServiceServer interface {
	mustEmbedUnimplementedVistorServiceServer()
}

func RegisterVistorServiceServer(s grpc.ServiceRegistrar, srv VistorServiceServer) {
	s.RegisterService(&VistorService_ServiceDesc, srv)
}

func _VistorService_ListVisitors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VisitorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VistorServiceServer).ListVisitors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.VistorService/ListVisitors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VistorServiceServer).ListVisitors(ctx, req.(*VisitorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VistorService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VistorServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.VistorService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VistorServiceServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// VistorService_ServiceDesc is the grpc.ServiceDesc for VistorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VistorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.VistorService",
	HandlerType: (*VistorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListVisitors",
			Handler:    _VistorService_ListVisitors_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _VistorService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "visitor.proto",
}
